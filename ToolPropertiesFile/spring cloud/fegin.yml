# fegin：ribbon与hystrix的结合
# 新建fegin项目，启动依赖添加Actuator、fegin、Eureka Discovery Client
# 启动类添加@EnableDiscoveryClient和@EnableFeginClients
spring:
  application:
    name: feign
    
server:
  port: 3001
  
eureka:
  client:
    service-url:
      defaultZone: http://eurekaServer1:8001/eureka, http://eurekaServer2:8002/eureka
# 编写Controller，编写Service，并在Service接口上添加@FeginClient("微服务名")
# 这样在调用该接口中方法时，fegin会向服务器发送请求：http://微服务名/参数
# 注意,如果Service中请求参数名与方法参数名不同,@RequestParam不能省略,
# 并且要指定请求参数名:@RequestParam("y") Integer s
# fegin默认启用了ribbon的负载均衡和重试，直接添加yml配置
ribbon:
  ConnectTimeout: 1000
  ReadTimeout: 1000

# 这里使用微服务名来设置特定微服务的属性
serviceName微服务名:
  ribbon:
    ConnectTimeout: 500
    ReadTimeout: 1000
    MaxAutoRetriesNextServer: 2
    MaxAutoRetries: 1
# fegin未添加完整的hystrix依赖，需在pom添加hystrix依赖，启动类添加@EnableCircuitBreaker
# fegin默认未启用hystrix，需要配置启用。后续hystrix的配置可参照hystrix配置内容
feign:
  hystrix:
    enabled: true
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 10000
# 启用hystrix降级后，如果没有降级方法则会在发生降级后，显示白板页。
# 编写降级类，实现对应微服务Service接口，添加@Component，交于spring管理。
# 修改微服务Service上的@FeignClient(name="微服务名", fallback = 降级类.class)
# pom添加actuator依赖，暴露hystrix监控端点
management:
  endpoints:
    web:
      exposure:
        include: hystrix.stream
# 启动hystrix dashboard项目，输入监控端点href进行监控
